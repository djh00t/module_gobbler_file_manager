###
### klingon_file_manager Build & Push Script
###
### This script is used to build and push the klingon_file_manager package to PyPI and TestPyPI.
### It is intended to be run as a GitHub Action. The high level workflow is as follows:
###
###   1. Increment the version number in the VERSION file. Only the 3rd digit (patch) should
###      be incremented. The 1st (major) and 2nd (minor) digits should only be incremented
###      when a backwards incompatible change is made.
###   2. Build the package and run tests. If the tests fail, the script will exit.
###   3. Push the package to TestPyPI and run tests. If the tests fail, the script will exit.
###   4. Push the package to PyPI and run tests. If the tests fail, the script will exit.
###   5. If the tests pass, push the updated VERSION file back to the repository.
###
### The script uses the Makefile to perform the build and test steps. The Makefile is also
### used to increment the version number in the VERSION file.
###

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main
  # branch and not for VERSION file changes
  push:
    branches: [ main ]
    paths-ignore: [ VERSION ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow makes sure that new releases have a higher version number
  # than the previous release in pypi and test-pypi
  check-pypi-version:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Set git user and email
      - name: Set git user and email
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'david@hooton.org'

      # Get APP_NAME
      - name: Get APP_NAME
        run: |
          echo "APP_NAME:               ${{ vars.APP_NAME }}"

      # Get PyPI Test Version Number
      - name: Get PyPI Test Version Number
        run: |
          export PYPI_TEST_VERSION=$(curl -s https://test.pypi.org/pypi/${{ vars.APP_NAME }}/json | jq -r '.info.version')
          echo "PYPI_TEST_VERSION=$PYPI_TEST_VERSION" >> $GITHUB_ENV
          echo "PYPI_TEST_VERSION:            $PYPI_TEST_VERSION"
      
      # Get PyPI Production Version Number
      - name: Get PyPI Production Version Number
        run: |
          export PYPI_PRODUCTION_VERSION=$(curl -s https://pypi.org/pypi/${{ vars.APP_NAME }}/json | jq -r '.info.version')
          echo "PYPI_PRODUCTION_VERSION=$PYPI_PRODUCTION_VERSION" >> $GITHUB_ENV
          echo "PYPI_PRODUCTION_VERSION: $PYPI_PRODUCTION_VERSION"

      # Get version number in VERSION file
      - name: Get version number in VERSION file
        run: |
          export VERSION=$(cat VERSION)
          echo "CURRENT VERSION:                $VERSION"
          echo "CURRENT_VERSION=$VERSION" >> $GITHUB_ENV
      
      # Find highest pypi version number
      - name: Find highest pypi version number
        run: |
          export HIGHEST_VERSION=$(echo -e "$VERSION\n$PYPI_TEST_VERSION\n$PYPI_PRODUCTION_VERSION" | sort -V | tail -1)
          echo "HIGHEST_VERSION:                $HIGHEST_VERSION"
          echo "HIGHEST_VERSION=$HIGHEST_VERSION" >> $GITHUB_ENV
      
      # Set version number as $HIGHEST_VERSION + 1
      - name: Set version number as $HIGHEST_VERSION + 1
        run: |
          export VERSION=$(echo $HIGHEST_VERSION | awk -F. '{$NF = $NF + 1;} 1' | sed 's/ /./g')
          echo "NEW VERSION:                    $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo $VERSION > VERSION
          git add VERSION || true
          git commit -m "Update version number - $VERSION" || true
          git push || true
          sleep 5

  # build-test workflow
  build-test:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs: check-pypi-version

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Setup python environment
      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.x

      # Set git user and email
      - name: Set git user and email
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'david@hooton.org'
      
      # Get APP_NAME
      - name: Get APP_NAME
        run: |
          echo "APP_NAME:               ${{ vars.APP_NAME }}"

      # Get the version number in the VERSION file and set the VERSION
      # environment variable
      - name: Get version number
        run: |
          git pull || true
          export FILE_VERSION=$(cat VERSION)
          echo "VERSION:          $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          sleep 5

      # Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          make check-packages
      


      # Add AWS Credentials to environment variables
      - name: Add AWS Credentials
        run: |
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
          echo "AWS_ACCESS_KEY_ID:      OK"
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY:  OK"
          echo "AWS_DEFAULT_REGION=${{ vars.AWS_DEFAULT_REGION }}" >> $GITHUB_ENV
          echo "AWS_DEFAULT_REGION:     ${{ vars.AWS_DEFAULT_REGION }}"
          echo "AWS_S3_BUCKET_NAME=${{ vars.AWS_S3_BUCKET_NAME }}" >> $GITHUB_ENV
          echo "AWS_S3_BUCKET_NAME:     ${{ vars.AWS_S3_BUCKET_NAME }}"

      # Builds the package and runs tests
      - name: Build and test
        run: |
          pip install .
          make sdist
          make wheel
          make test

      # If tests pass, push the package to TestPyPI
      - name: Push to TestPyPI
        run: |
          make upload-test TEST_PYPI_USER_AGENT=${{ secrets.TEST_PYPI_USER_AGENT }}

      # Pull the package from TestPyPI and run tests
      - name: Pull from TestPyPI and test
        run: |
          pip install --index-url https://test.pypi.org/simple/ klingon-serial
          python -m unittest discover

  build-production:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs: build-test

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Setup python environment
      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.x
          
      # Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          make check-packages

      # Set git user and email
      - name: Set git user and email
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'david@hooton.org'

      # Get APP_NAME from Makefile
      - name: Get APP_NAME from Makefile
        run: |
          export APP_NAME=$(grep APP_NAME Makefile | cut -d'=' -f2 | head -1 | sed 's/"//g')
          echo "APP_NAME:               ${{ vars.APP_NAME }}"

      # Get the version number in the VERSION file and set the VERSION
      # environment variable
      - name: Get version number
        run: |
          git pull || true
          export FILE_VERSION=$(cat VERSION)
          echo "VERSION:          $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          sleep 5

      # Add AWS Credentials to environment variables
      - name: Add AWS Credentials
        run: |
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
          echo "AWS_ACCESS_KEY_ID:      ${{ secrets.AWS_ACCESS_KEY_ID }}"
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          echo "AWS_DEFAULT_REGION=${{ vars.AWS_DEFAULT_REGION }}" >> $GITHUB_ENV
          echo "AWS_DEFAULT_REGION:     ${{ vars.AWS_DEFAULT_REGION }}"
          echo "AWS_S3_BUCKET_NAME=${{ vars.AWS_S3_BUCKET_NAME }}" >> $GITHUB_ENV
          echo "AWS_S3_BUCKET_NAME:     ${{ vars.AWS_S3_BUCKET_NAME }}"

      # Builds the package and runs tests
      - name: Build and test
        run: |
          pip install .
          make sdist
          make wheel
          make test

      # If tests pass, pushes the package to PyPI and runs tests
      - name: Push to PyPI
        run: |
          make upload PYPI_USER_AGENT=${{ secrets.PYPI_USER_AGENT }}

      # Pulls the package from PyPI and runs tests
      - name: Pull from PyPI and test
        run: |
          pip install klingon-serial
          python -m unittest discover

      # If uploads are successful, and the VERSION file has changed create a
      # checkpoint by tagging the commit with the version number
      - name: Tag commit with version number $VERSION
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'github@hooton.org'
          git diff --quiet VERSION || git tag $VERSION

      # If uploads are successful, and the VERSION file has changed push the
      # updated VERSION file back to the repository
      - name: Push updated VERSION to repository
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'github-actions@github.com'
          git diff --quiet VERSION || (git add VERSION && git commit -m "Update version number - $VERSION" && git push) || echo "VERSION file not updated"
